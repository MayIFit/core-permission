"Represents NULL values"
scalar VoidScalar @scalar(class: "App\\GraphQL\\Scalars\\Core\\VoidScalar")

extend type Query @guard(with: ["sanctum"]) {
    me: User @auth

    listUser(
        real_name: String @where(operator: "like")
        email: String @where(operator: "like")
        name: String @where(operator: "like")
    ): [User!]! 
        @can(ability: "viewAny" model: "App\\Models\\User") 
        @paginate(type: "paginator")

    viewUser(
        id: ID @eq
    ): User! 
        @can(ability: "view" find:"id") @find

    hasPermission(entity: String! permission: String!): Boolean! 
        @field(resolver: "HasPermission@resolve")
}

extend type Mutation {
    registerUser(
        input: RegisterUserInput! @spread
    ): User 
        @field(resolver: "UserRegistration@resolve")

    loginUser(
        input: LoginUserInput! @spread
    ): User 
        @field(resolver: "UserAuthentication@resolve")

    resetUserPassword(
        input: ResetUserPasswordInput! @spread
    ): User
        @field(resolver: "UserPasswordReset@resolve")
    
    sendUserPasswordResetNotification(
        input: ResetUserPasswordNotificationInput! @spread
    ): VoidScalar @field(resolver: "UserPasswordReset@sendEmailNotification")
}

extend type Mutation @guard(with: ["sanctum"]) {
    createUser(
        input: CreateUserInput @spread
    ): User 
        @can(ability: "create" model: "App\\Models\\User") 
        @create

    updateUser(
        input: UpdateUserInput @spread
    ): User 
        @can(ability: "update" find: "id") 
        @update

    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User 
        @can(ability: "delete" find: "id") 
        @delete

    logoutUser: Boolean
        @field(resolver: "UserUnauthentication@resolve")
}

input ResetUserPasswordNotificationInput {
    email: String! @rules(apply: ["required", "email", "exists:users,email"])
}

input LoginUserInput {
    email: String! @rules(apply: ["required", "email", "exists:users,email"])
    password: String! @rules(apply: ["required"])
}

input RegisterUserInput {
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    password: String! @hash @rules(apply: ["required", "min:8"])
}

input ResetUserPasswordInput {
    email: String! @rules(apply: ["required", "email", "exists:users,email"])
    token: String! @rules(apply: ["required"])
    password: String! @hash @rules(apply: ["required", "min:8"])
}

input UpdateUserInput {
    id: ID!
    name: String
    real_name: String
    email: String
    password: String @hash
    permissions: UpdatePermissionRelation
    roles: UpdateRoleRelation
    avatar: String
    language: String
}

input CreateUserInput {
    name: String!
    real_name: String
    email: String!
    password: String! @hash
    permissions: UpdatePermissionRelation
    roles: UpdateRoleRelation
    avatar: String
    language: String!
}

input UpdateUserRelation {
    connect: ID
}

type User {
    id: ID!
    name: String
    real_name: String
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    avatar: String
    language: String
    access_token: String
    roles: [Role!] @belongsToMany
    permissions: [Permission!] @belongsToMany
}