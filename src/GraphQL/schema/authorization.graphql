extend type Query @guard(with: ["sanctum"]) {
    me: User @auth

    listUser: [User!]! 
        @can(ability: "viewAny" model: "MayIFit\\Core\\Permission\\Models\\User") 
        @paginate(type: "paginator")

    viewUser(
        id: ID @eq
    ): User! 
        @can(ability: "view" find:"id") @find

    hasPermission(entity: String! permission: String!): Boolean! 
        @field(resolver: "GetOrderFromToken@resolve")
}

extend type Query {
    loginUser(
        email: String! 
        password: String! @rules(apply: ["required"])
    ): User 
        @field(resolver: "UserAuthentication@resolve")
}

extend type Mutation {
    registerUser(
        email: String!
        password: String! @hash
    ): User 
        @field(resolver: "UserRegistration@resolve")
}

extend type Mutation @guard(with: ["sanctum"]) {
    createUser(
        input: CreateUserInput @spread
    ): User 
        @can(ability: "create" model: "MayIFit\\Core\\Permission\\Models\\User") 
        @create

    updateUser(
        input: UpdateUserInput @spread
    ): User 
        @can(ability: "update" find: "id") 
        @update

    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User 
        @can(ability: "delete" find: "id") 
        @delete
}

input UpdateUserInput {
    id: ID!
    name: String
    real_name: String
    email: String
    password: String @hash
    permissions: UpdatePermissionRelation
    roles: UpdateRoleRelation
    avatar: String
    language: String
    __typename: String
}

input CreateUserInput {
    name: String!
    real_name: String
    email: String!
    password: String! @hash
    permissions: UpdatePermissionRelation
    roles: UpdateRoleRelation
    avatar: String
    language: String!
    __typename: String
}

type User {
    id: ID!
    name: String
    real_name: String
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    avatar: String
    language: String
    access_token: String
    roles: [Role!] @belongsToMany
    permissions: [Permission!] @belongsToMany
}