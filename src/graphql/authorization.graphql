#import permission.graphql
#import role.graphql

extend type Query @guard(with: ["sanctum"]) {
    me: User @auth

    listUser: [User!]! 
        @can(ability: "viewAny" model: "MayIFit\\Core\\Permission\\Models\\User") 
        @paginate(type: "paginator")

    viewUser(
        id: ID @eq
    ): User! 
        @can(ability: "view" find:"id") @find
}

extend type Mutation @guard(with: ["sanctum"]) {
    createUser(
        name: String @rules(apply: ["required"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
    ): User 
        @can(ability: "create"model: "MayIFit\\Core\\Permission\\Models\\User") 
        @create

    updateUser(
        id: ID @rules(apply: ["required"])
        name: String
        email: String @rules(apply: ["email"])
    ): User 
        @can(ability: "update" find: "id") 
        @update

    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User 
        @can(ability: "delete" find: "id") 
        @delete
}

type User {
    id: ID!
    name: String!
    real_name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    avatar: String
    language: String
    roles: [Role!] @belongsToMany
}