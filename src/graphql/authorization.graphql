extend type Query @guard(with: ["sanctum"]) {
    me: User @auth

    listUser: [User!]! @can(ability: "index") @paginate(type: "paginator")
    viewUser(id: ID @eq): User @can(ability: "view" find:"id") @find

    listPermission: [Permission!]! @can(ability: "index") @all
    listRole: [Role!]! @can(ability: "index") @paginate(type: "paginator")
    viewRole(id: ID @eq): Role @can(ability: "view" find:"id") @find
}

extend type Mutation @guard(with: ["sanctum"]) {
    createUser(
        name: String @rules(apply: ["required"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
    ): User @can(ability: "create") @create

    updateUser(
        id: ID @rules(apply: ["required"])
        name: String
        email: String @rules(apply: ["email"])
    ): User @can(ability: "update" find: "id") @update

    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User @can(ability: "delete" find: "id") @delete

    updateRole(input: UpdateRoleInput! @spread): Role @can(ability: "update" find: "id") @update
    createRole(input: CreateRoleInput! @spread): Role @can(ability: "create") @create
    deleteRole(id: ID! @rules(apply: ["required"])): Role @can(ability: "delete" find: "id") @delete
}

input UpdateRoleInput {
    id: ID!
    name: String!
    active: Boolean!
    description: String
    permissions: UpdatePermissionRelation
    __typename: String
}

input CreateRoleInput {
    name: String!
    active: Boolean!
    description: String
    permissions: UpdatePermissionRelation
    __typename: String
}

input UpdatePermissionRelation {
    sync: [ID!]
    __typename: String
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Permission @modelClass(class: "\\MayIFit\\Core\\Permission\\Models\\Permission") {
    id: ID!
    name: String!
    method: String!
    roles: [Role!] @belongsToMany 
}

type Role @modelClass(class: "\\MayIFit\\Core\\Permission\\Models\\Role") {
    id: ID!
    name: String!
    description: String
    active: Boolean
    permissions: [Permission!]! @belongsToMany 
}